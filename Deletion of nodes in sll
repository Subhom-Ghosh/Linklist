#include <stdio.h>
#include <conio.h>
#include <malloc.h>  
#include<stdlib.h>

struct slinklist
{
int data;
struct slinklist* next;
};

typedef struct slinklist node;  
node *start = NULL;

node* getnode()
{
     node* newnode;
     newnode = (node *) malloc(sizeof(node));    
     printf("\n Enter data: ");
     scanf("%d", &newnode -> data); 
     newnode -> next = NULL; 
     return newnode;
}

void create_list( int n)
{
    int i;
    node * newnode, *temp; 
    for( i = 0 ; i < n ; i++)
    {
          newnode = getnode(); 
          if(start == NULL)
         {
             start = newnode;
         }
         else
         {
             temp = start;
             while(temp -> next != NULL) 
                temp = temp -> next;
             temp -> next = newnode;
         }
    }
}


void traverse()
{
     node *temp; 
     temp =start;
     printf("\n The contents of List (Left to Right): \n");
     if(start == NULL )
        printf("\n Empty List");
     else
     {
        while (temp != NULL)
        {
            printf("%d ->", temp -> data);  
            temp = temp -> next;
            
        }
     }
     printf("X");
}
void delete_at_beg()
{
     node *temp;  
     if(start == NULL)
     {
         printf("\n No nodes are exist..");
           return ;
     }
     else
     {
         temp = start;
         start = start -> next;  
         free(temp);
         printf("\n Node deleted ");
     }
}
void delete_at_last()
{
     node *temp, *prev; 
     if(start == NULL)
    {
        printf("\n Empty List..");  
        return ;
    }
    else
   {
        temp = start;  
        prev = start;
        while(temp -> next != NULL)
       {
             prev = temp;
             temp = temp -> next;
       }
       prev -> next = NULL;  
       free(temp);
    }
}
int countnode()
{
	int count=1;
	node* temp;
	temp=start;
	while(temp->next!=NULL)
	{
		count++;
		temp=temp->next;
	}
	return count;
}

void delete_at_pos()
  {
      int i, pos, nodectr;
      node *temp, *prev;  
      if(start == NULL)
     {
           printf("\n Empty List..");
           return ;
     }
     else
     {
           printf("\n Enter position of node to delete: ");  
           scanf("%d", &pos);
           nodectr = countnode();
         if(pos > nodectr)
         {
               printf("\nThis node doesnot exist");
         }
else if (pos>1 && pos<=nodectr)
  {
       prev=NULL;
       temp=start;
       for(i=1;i<pos;i++)
       {
           prev=temp;
           temp = temp->next;
       }
       prev -> next = temp -> next; 
       free(temp);
       printf("\n Node deleted..");
   }
   else
       printf("\n%d is not a intermediate position", pos);
  }
}
int main()
{
     int num,ch;
     printf("Enter number of elements want to insert in the list: ");
     scanf("%d",& num);
     create_list(num);
     traverse();
     while(1)
     {
     	printf("\n1 create list\n");
     	printf("2 Delete element at first\n");
     	printf("3 Delete element at end\n");
     	printf("4 Delete element at intermediate position\n");
     	printf("5 display list\n");
     	printf("6 exit\n");
     	printf("Which option do you want to do ");
     	scanf("%d",&ch);
     	switch(ch)
     	{
     		case 1:printf("Enter the node ");
     		scanf("%d",&num);
     		create_list(num);
     		break;
     		case 2:delete_at_beg();
     		break;
     		case 3:delete_at_last();
     		break;
     		case 4:delete_at_pos();
     		break;
     		case 5:
     		traverse();
     		break;
     		case 6: exit(0);
     		break;
     		default: printf("Wrong choices");
		 }
	 }
     return 0;
}




//
OUTPUT:
/*
Enter number of elements want to insert in the list: 5

 Enter data: 1

 Enter data: 2

 Enter data: 3

 Enter data: 4

 Enter data: 5

 The contents of List (Left to Right):
1 ->2 ->3 ->4 ->5 ->X
1 create list
2 Delete element at first
3 Delete element at end
4 Delete element at intermediate position
5 display list
6 exit
Which option do you want to do 2

 Node deleted
1 create list
2 Delete element at first
3 Delete element at end
4 Delete element at intermediate position
5 display list
6 exit
Which option do you want to do 5

 The contents of List (Left to Right):
2 ->3 ->4 ->5 ->X
1 create list
2 Delete element at first
3 Delete element at end
4 Delete element at intermediate position
5 display list
6 exit
Which option do you want to do 4

 Enter position of node to delete: 3

 Node deleted..
1 create list
2 Delete element at first
3 Delete element at end
4 Delete element at intermediate position
5 display list
6 exit
Which option do you want to do 5

 The contents of List (Left to Right):
2 ->3 ->5 ->X
1 create list
2 Delete element at first
3 Delete element at end
4 Delete element at intermediate position
5 display list
6 exit
Which option do you want to do 3

1 create list
2 Delete element at first
3 Delete element at end
4 Delete element at intermediate position
5 display list
6 exit
Which option do you want to do 5

 The contents of List (Left to Right):
2 ->3 ->X
1 create list
2 Delete element at first
3 Delete element at end
4 Delete element at intermediate position
5 display list
6 exit
Which option do you want to do 6

--------------------------------
Process exited after 51.62 seconds with return value 0
Press any key to continue . . .
*/

